importlib user32,\
	EnumChildWindows,\
	MapDialogRect,\
	PostMessageA,\
	GetScrollRange,\
	SetScrollPos,\
	GetAsyncKeyState 
importlib gdi32,\
	CreateSolidBrush,\
	DeleteObject
importlib kernel32,\
	CreateEventA,\
	CloseHandle,\
	CreateThread,\
	Sleep,\
	WaitForMultipleObjects,\
	WaitForSingleObject,\
	SetEvent,\
	ResetEvent,\
	WaitCommEvent,\
	TerminateThread,\
	ExitThread,\
	GetLastError,\
	GetTickCount
importlib shell32,\
	DragAcceptFiles

proc_noprologue

proc PortForm.switchThread c uses pbx psi, _this
	@virtObj this:arg PortForm at pcx from @arg1

	mov pbx, [this.threadParams.hPauseEvent]
	mov psi, [this.threadParams.hPausedEvent]
	@call [SetEvent](pbx)
	@call [WaitForSingleObject](psi, -1)
	@call [ResetEvent](psi)
	ret
endp

proc PortForm.ThreadProc, lpParam
	@virtObj _params COMReadThreadParams at pbx from @arg1
	locals
		 comIface 	COMIface
		 lastTime 	dptr ?
		 o 			OVERLAPPED
		 flags 		dptr 0
		 dcb 		DCB
		 lpMem		dptr ?
	endl

	mov pax, [_params.hCOM]
	mov [comIface.handle], pax
	mov [comIface.timeouts.ReadIntervalTimeout], 0x7FFFFFFF
	mov [comIface.timeouts.ReadTotalTimeoutMultiplier], 0
	mov [comIface.timeouts.ReadTotalTimeoutConstant], 0
	@call comIface->setTimeouts()
	@call comIface->setMask(EV_RXCHAR or EV_TXEMPTY)
	@call comIface->reset()
	mov eax, [_params.sizeBuf]
	@call [lpMem] = CNV::alloc(addr pax * 2 + 4)
	@call [lastTime] = [GetTickCount]()
	mov pax, [_params.hCOMEvent]
	mov [o.hEvent], pax
	lea psi, [flags]
	lea pdi, [o]
	.read_loop:
		@call comIface->waitEvent(psi, pdi)
		@call [WaitForMultipleObjects](3, addr _params._events, 0, [_params.delay])
		switch eax
			case WAIT_OBJECT_0
				; @call c [puts]("exit")
				@call comIface->setMask(0)
				@call CNV::free([lpMem])
				@call [ExitThread](0)
			case WAIT_OBJECT_0 + 1
				; @call c [puts]("pause")
				@call [ResetEvent]([_params.hPauseEvent])
				@call [SetEvent]([_params.hPausedEvent])
				@call [WaitForSingleObject]([_params.hPauseEvent], -1)
				@call [ResetEvent]([_params.hPauseEvent])
				@call [SetEvent]([_params.hPausedEvent])
				@call comIface->reset()
				mov eax, [_params.sizeBuf]
				@call CNV::realloc([lpMem], addr pax * 2 + 4)
				mov [lpMem], pax
				mov dword[pax], 0
				; @call c [puts]("resume")
				jmp .read_loop
			case WAIT_OBJECT_0 + 2
				; @call c [puts]("input")
				@call comIface->getStat()
				test eax, eax
				jnz .no_err
					@call CNV::free([lpMem])
					@call comIface->setMask(0)
					@call [PostMessageA]([_params.hWnd], PortForm.WM_COMM, NULL, 0)
					@call [ExitThread](0)
				.no_err:
				cmp [comIface.comstat.cbInQue], 0
					je .read_loop
				mov edi, [comIface.comstat.cbInQue]
				mov psi, [lpMem]
				mov eax, dword[psi]
				mov ecx, [_params.sizeBuf]
				sub ecx, eax
				cmp ecx, edi
				ja .no_realloc
					@call psi = CNV::realloc(psi, addr pdi + pax + 4)
					mov [lpMem], psi
					mov eax, dword[psi]
				.no_realloc:
				@call comIface->read(addr psi + pax + 4, pdi, addr o)
				@call [WaitForSingleObject]([o.hEvent], -1)
				@call pdi = comIface->getReadedCount(addr o)
				add edi, dword[psi]
				mov dword[psi], edi
				shr edi, 1
				cmp edi, [_params.sizeBuf]
				jae .overflow_buf
					lea psi, [flags]
					lea pdi, [o]
					@call [GetTickCount]()
					sub eax, dword[lastTime]
					cmp eax, [_params.delay]
						jb .read_loop
				.overflow_buf:
			case WAIT_TIMEOUT
				@call [lastTime] = [GetTickCount]()
				mov pax, [lpMem]
				cmp dword[pax], 0
					je .read_loop
				mov psi, pax
				@call [PostMessageA]([_params.hWnd], PortForm.WM_COMM, psi, dword[psi])
				mov eax, [_params.sizeBuf]
				@call [lpMem] = CNV::alloc(addr pax * 2 + 4)
				lea psi, [flags]
				jmp .read_loop
			; case_default
			; 	@call c [printf]("%d", eax)
		end_switch
	jmp .read_loop
endp

proc PortForm_init uses pbx psi, lpForm, lpParams, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	@virtObj parent:arg ColoredDialog at psi from [form.lpParent]

	; open COM
	@call form.comIface->openA(addr form.portName)
	test pax, pax
	jnz .noErr
		@call WND::msgBox("Ошибка открытия порта", NULL, MB_OK, [form.hWnd])
		@call form->close()
		ret
	.noErr:

	; base form settings
	@call form->setIcon([parent.hIcon])
	@call form->setCornerType(DWMWCP.DONOTROUND)
	@call form->setText(addr form.portName)

	@call form.listBoxOutFormat->addItem("ASCII")
	@call form.listBoxOutFormat->addItem("HEX")
	
	@call form.listBoxInFormat->addItem("ASCII")
	@call form.listBoxInFormat->addItem("HEX")

	; append system menu item for theme chamging
	@call [form.hSysMenu] = [GetSystemMenu]([form.hWnd], 0)
	@call [AppendMenuA]([form.hSysMenu], MF_SEPARATOR, 0, NULL)
	mov eax, [parent.isLight]
	@call [AppendMenuA]([form.hSysMenu], MF_STRING, ColoredDialog.ID_MENU_THEME, \
			pointer[ColoredDialog.menuTexts + pax * pointer.size])

	; accept Drag&Drop
	@call [SetWindowPos]([form.buttonSend.hWnd], HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE or SWP_NOSIZE or SWP_DRAWFRAME)
	@call [SetWindowPos]([form.editOut.hWnd], HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE or SWP_NOSIZE or SWP_DRAWFRAME)
	; @call form.editOut->setPlaceholder(L "You can drag&drop file here")

	; theme settings
	@call form->setCaptionColor([parent.backColor])
	mov eax, [parent.isLight]
	@call [EnumChildWindows](\
		[form.hWnd], ColoredDialod.ChangeThemeChilds,\
		pointer[ColoredDialog.ChildThemes + pax * pointer.size]\
	)

	; min/max size settings
	@call [MapDialogRect]([form.hWnd], addr form.minMaxRect)
	cmp [form.minMaxRect.right], 0
	jg @f
		mov [form.minMaxRect.right], 0x7FFFFFFF
	@@:
	cmp [form.minMaxRect.bottom], 0
	jg @f
		mov [form.minMaxRect.bottom], 0x7FFFFFFF
	@@:

	; COMIface settings and delay set
	local dcb:DCB
	@call form.comIface->getParams(addr dcb)
	@call form.comIface->getParams(addr dcb)
	mov [dcb.BaudRate], 9600
	; mov [form.threadParams.delay], 1000 / 50
	@call form.comIface->setParams(addr dcb)

	; comboBaud values set
	.BaudValues @const dq "75", "110", "134", "150", "300", "600", "1200", \
			"1800", "2400", "4800", "7200", "9600", "14400", "19200", \
			"38400", "57600", "115200", "128000"
	mov psi, -.BaudValues.len
	@@:
		@call form.comboBaud->addItem(addr .BaudValues + .BaudValues.len + psi)
	add psi, 8
	jnz @b
	@call form.comboBaud->setSelected(11)

	; comboByteSize values set
	local bszNums:dd "4"
	@@:
		@call form.comboByteSize->addItem(addr bszNums)
		inc [bszNums]
	cmp [bszNums], "8"
	jle @b
	movzx pax, [dcb.ByteSize]
	@call form.comboByteSize->setSelected(addr pax - 4)

	; comboParity
	.ParityValues @const dq "Нет", "Нечет", "Чёт", "Маркер", "Пробел"
	mov psi, -.ParityValues.len
	@@:
		@call form.comboParity->addItem(addr .ParityValues + .ParityValues.len + psi)
	add psi, 8
	jnz @b
	@call form.comboParity->setSelected([dcb.Parity])

	; comboStopBits
	.StopBitsValues @const dd "1", "1.5", "2"
	mov psi, -.StopBitsValues.len
	@@:
		@call form.comboStopBits->addItem(addr .StopBitsValues + .StopBitsValues.len + psi)
	add psi, 4
	jnz @b
	@call form.comboStopBits->setSelected([dcb.StopBits])

	; setup editIn
	@call form.editIn->setLimit(EDIT.LIMIT_TEXT)

	; string buffer init
	@call form.strBuf->make(0)

	; run thread for read from port
	mov pax, [form.hWnd]
	mov [form.threadParams.hWnd], pax
	mov pax, [form.comIface.handle]
	mov [form.threadParams.hCOM], pax
	@call [CreateEventA](NULL, 1, 0, NULL)
	mov [form.overlapped.hEvent], pax
	mov [form.threadParams.hCOMEvent], pax
	@call [form.threadParams.hStopEvent] = [CreateEventA](NULL, 1, 0, NULL)
	@call [form.threadParams.hPauseEvent] = [CreateEventA](NULL, 1, 0, NULL)
	@call [form.threadParams.hPausedEvent] = [CreateEventA](NULL, 1, 0, NULL)
	mov [form.threadParams.delay], PortForm.UPDATE_DELAY
	mov [form.threadParams.sizeBuf], PortForm.COM_BUF_SIZE
	@call [form.hThread] = [CreateThread](NULL, NULL, PortForm.ThreadProc, addr form.threadParams, 0, 0)
	
	; stopped by default
	@call form->switchThread()

	@call [form.hDeviceNotify] = COMInfo::registerNotify([form.hWnd], DEVICE_NOTIFY_WINDOW_HANDLE)
	mov [form.isPaused], 1
	mov eax, esp
	ret
endp

proc PortForm_sysCommand, lpForm, lpParams, lpEventData
	virtObj .params params at pdx from @arg2
	xor eax, eax
	cmp [.params.wParam], ColoredDialog.ID_MENU_THEME
		jne .return
	@virtObj form:arg PortForm at pcx from @arg1
	@call MainForm_sysCommand([form.lpParent], addr .params, @arg3)
	mov eax, esp
	.return: 
	ret
endp

proc PortForm_mouseButtonDown, lpForm, lpParams, lpEventData
	@call DIALOGFORM::setFocus(@arg1)
	ret
endp

proc PortForm.ClearButton_click, lpForm, lpParams, lpControl, lpEventData
	@virtObj form:arg PortForm at pcx from @arg1
	@call form.editIn->setText("")
	ret
endp

proc PortForm.streamCallback c, lpString, lParam
	mov eax, 0
	ret
endp

proc PortForm.OutEdit_drop uses pbx psi, lpForm, lpParams, lpControl, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	@virtObj _params:arg params at psi from @arg2
	; @virtObj .cntrl:arg CONTROL at pbx from @arg3

	local lpFile:POINTER;, lpFileData:POINTER, lpFile:POINTER
	; int3
	with string1:String(0), string2:String(0)
		@call WND::dragFileNameString(addr string1, [_params.wParam], 0)
		@call string2->fromChars("Подтвердите отправку файла ", -1)
		@call string2->addString(addr string1)->getLpChars()
		@call WND::msgBox(pax, "Подтверждение отправки файла", dwStyle: MB_YESNO)
		cmp pax, IDYES
		jne .no_commit
			@call string1->getLpChars()
			@call [fopen](pax, "rb+")
			mov [lpFile], pax
			@call string1->streamRead(pax, 0Ah, NULL, PortForm.streamCallback, NULL)
			@call string1->getLpChars()
			@call form.comIface->write(pax, [string1.len], addr form.overlapped)
			@call [WaitForSingleObject]([form.overlapped.hEvent], 1000)
			@call [fclose]([lpFile])
		.no_commit:
	end_with
	; int3
	ret
endp

proc strHexToBytes c uses psi pdi pbx, lpString
	@virtObj string:arg String at pbx from @arg1
	@call string->getLpChars()
	mov psi, pax
	mov pdi, pax
	xor edx, edx
	xor ecx, ecx
	xor eax, eax
	@@:
		lodsb
		switch pax
			case +"0" ... +"9"
				sub eax, "0"
				jmp end_case
			case +"a" ... +"f"
				sub eax, "a" - "A"
			case +"A" ... +"F"
				sub eax, "A" - 10
				jmp end_case
			case " "
				test ecx, 1
					jz @b
				xor ecx, 1
				mov eax, edx
				stosb
				xor edx, edx
				jmp @b
			case 0
				test ecx, 1
				jz .no_save1
					mov eax, edx
					stosb
				.no_save1:
				mov byte[pdi + 1], 0
				@call string->getLpChars()
				sub pdi, pax
				mov [string.len], edi
				ret
			case_default
				mov pax, 0
				ret
		end_switch
		shl edx, 4
		add edx, eax
		test ecx, 1
		jz .no_save2
			mov eax, edx
			xor edx, edx
			stosb
		.no_save2:
		xor ecx, 1
	jmp @b
endp

proc PortForm.SendButton_click uses pbx, lpForm, lpParams, lpControl, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	@call form.editOut->getString(addr form.strBuf)
	; int3
	cmp [form.listBoxInFormat.lastSelected], 1
	jne .no_convert
		@call c strHexToBytes(addr form.strBuf)
		cmp eax, 0
		jne .no_error
			@call WND::msgBox("Неверный формат ввода!")
			ret
		.no_error:
	.no_convert:
	@call form.strBuf->getLpChars()
	@call form.comIface->write(pax, [form.strBuf.len], addr form.overlapped)
	@call [WaitForSingleObject]([form.overlapped.hEvent], -1)
	ret
endp

proc PortForm.OutEdit_keyDown, lpForm, lpParams, lpControl, lpEventData
	@sarg @arg1
	virtObj .params params at pcx from @arg2
	; @call c [printf]("%d, %d\n", [.params.wParam], VK_RETURN)
	switch [.params.wParam]
		case VK_RETURN
			@sarg @arg2, @arg3, @arg4

			@call c [GetAsyncKeyState](VK_CONTROL)
			test pax, 0x8000
				cmovz pcx, [lpParams]
				jz end_case
			@call PortForm.SendButton_click([lpForm], [lpParams], [lpControl], [lpEventData])
			mov pax, 0
			ret
	end_switch
	@call [DefSubclassProc]([.params.hWnd], [.params.uMsg], [.params.wParam], [.params.lParam])
	ret
endp

proc PortForm.SetupButton_clicked uses pbx psi, lpForm, lpParams, lpControl, lpEventData
	.BaudValues @const dd 75, 110, 134, 150, 300, 600, 1200, \
			1800, 2400, 4800, 7200, 9600, 14400, 19200, \
			38400, 57600, 115200, 128000
	@virtObj form:arg PortForm at pbx from @arg1
	local dcb:DCB, retAddr:POINTER
	
	mov [retAddr], .after_pause_1
	test [form.isPaused], 1
		jz .pause
	.after_pause_1:

	; setup COMIface
	@call form.comIface->getParams(addr dcb)
	@call form.comboBaud->getSelected()
	mov eax, [.BaudValues + pax * 4]
	mov [dcb.BaudRate], eax
	@call form.comboParity->getSelected()
	mov [dcb.Parity], al
	@call form.comboByteSize->getSelected()
	add al, 4
	mov [dcb.ByteSize], al
	@call form.comboStopBits->getSelected()
	mov [dcb.StopBits], al
	@call form.editDelay->getString(addr form.strBuf)
	@call form.strBuf->parseInt(10)

	.delayError @const db "Слишком низкая задержка! Не менее 10 мс.", 0
	mov pdx, .delayError
	cmp eax, 10
		jb .error
	
	mov [form.threadParams.delay], eax
	@call form.editBufSize->getString(addr form.strBuf)
	@call form.strBuf->parseInt(10)

	.sizeError @const db "Недопустимый размер буфера! От 512 до 65 536 байт.", 0
	mov pdx, .sizeError
	cmp eax, 512
		jb .error
	cmp eax, 65536
		ja .error

	mov [form.threadParams.sizeBuf], eax
	@call form.comIface->setParams(addr dcb)

	mov [retAddr], .after_pause_2
	test [form.isPaused], 1
		jz .pause
	.after_pause_2:
	ret

	.pause:
		@call form->switchThread()
		jmp [retAddr]

	.error:
		@call WND::msgBox(pdx)
		mov [retAddr], .after_error
		test [form.isPaused], 1
			jz .pause
		.after_error:
		ret
endp

proc PortForm.PauseButton_click uses pbx, lpForm, lpParams, lpControl, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	.buttonOpenTexts @const dq "Пауза", "Пуск"
	xor [form.isPaused], 1
	@call form->switchThread()
	mov eax, [form.isPaused]
	@call form.buttonPause->setText(addr .buttonOpenTexts + pax * 8)
	ret
endp

proc PortForm.asciiToHex uses psi pdi, lpMem, lpSize
	@sarg @arg1, @arg2
	@larg psi, @arg1

	local lpDest:POINTER
	mov ecx, dword[psi]
	@call pdi = CNV::alloc(addr pcx * 3 + 4)
	mov [lpDest], pdi
	mov ecx, dword[psi]
	
	; each byte now requires 3 bytes space: high 4 bits, low 4 bits and space
	lea pax, [pcx * 3]
	mov dword[pdi], eax

	mov pdx, [lpSize]
	mov dword[pdx], eax
	
	; correct space for length of array
	add psi, 4
	add pdi, 4

	.convert_loop:
		xor eax, eax
		lodsb
		mov edx, eax


		and eax, 0xF
		shl eax, 8
		cmp eax, 0x900
		jbe @f
			add eax, (0x4000 - 0x3900)
		@@:

		shr edx, 4
		and edx, 0xF
		cmp edx, 0x9
		jbe @f
			add edx, (0x40 - 0x39)
		@@:
		lea eax, [eax + edx + 0x200000 + 0x3030]
		stosd
		dec pdi
	loop .convert_loop

	@call CNV::free([lpMem])
	mov pax, [lpDest]
	ret
endp

proc PortForm_COMIn uses pbx psi, lpForm, lpParams, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	@virtObj _params:arg params at psi from @arg2
	locals
		textLen 	dd ?
		startSel 	dd ?
		endSel 		dd ?
	endl
	cmp [_params.wParam], NULL
	jne .no_error
		@call form->close()
		ret
	.no_error:
	; @call c [printf]("%d\n", [_params.lParam])
	test [form.isPaused], 1
	jnz .no_add
		cmp [form.listBoxOutFormat.lastSelected], 0
		je .no_hex
			@call [_params.wParam] = PortForm.asciiToHex([_params.wParam], addr _params.lParam)
		.no_hex:
		cmp [_params.lParam], EDIT.LIMIT_TEXT
		jbe .no_fill
			mov pcx, [_params.wParam]
			mov pax, [_params.lParam]
			@call form.editIn->setText(addr pcx + 4 + pax - EDIT.LIMIT_TEXT)
			@call form.editIn->setSelected(EDIT.LIMIT_TEXT, EDIT.LIMIT_TEXT)
			@call [SendMessageA]([form.editIn.hWnd], EM_SCROLLCARET, 0, 0)
			jmp .no_add
		.no_fill:
		@call form.editIn->setRedraw(0)
		@call form.editIn->getSelected(addr startSel, addr endSel)
		@call form.editIn->getTextLen()
		mov [textLen], eax
		add pax, [_params.lParam]
		cmp eax, EDIT.LIMIT_TEXT
		js .overflow_limit
			shr eax, 2
			sub [textLen], eax
			sub [startSel], eax
			sub [endSel], eax
			@call form.editIn->setSelected(0, eax)
			@call form.editIn->replaceSelected("")
		.overflow_limit:
		@call form.editIn->setSelected([textLen], [textLen])
		@call form.editIn->setRedraw(1)
		mov pax, [_params.wParam]
		@call form.editIn->replaceSelected(addr pax + 4)
		cmp [startSel], 0
		jl .break_bounds
			@call form.editIn->setSelected([startSel], [endSel])
		.break_bounds:
	.no_add:
	@call CNV::free([_params.wParam])
	ret
endp

proc PortForm_deviceChange uses pbx, lpForm, lpParams, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	@call form.comIface->getStat()
	test pax, pax
		jnz .return
	@call form->close()
	.return: ret
endp

proc PortForm_ctlColor, lpForm, lpParams, lpEventData
	@virtObj form:arg PortForm at pcx from @arg1
	@virtObj parent:arg ColoredDialog at pcx from [form.lpParent]
	@call ColoredDialog_ctlColor(addr parent, @arg2, @arg3)
	ret
endp

proc PortForm_paintGroup, lpForm, lpParams, lpControl, lpEventData
	@virtObj form:arg PortForm at pcx from @arg1
	@virtObj parent:arg ColoredDialog at pcx from [form.lpParent]
	@call ColoredDialog_paintGroup(addr parent, @arg2, @arg3, @arg4)
	ret
endp

proc PortForm_close uses pbx, lpForm, lpParams, lpEventData
	@virtObj form:arg PortForm at pbx from @arg1
	@call COMInfo::unregisterNotify([form.hDeviceNotify])
	@call form.strBuf->unmake()
	test [form.isPaused], 1
	jz .no_paused
		@call form->switchThread()
	.no_paused:
	@call [SetEvent]([form.threadParams.hStopEvent])
	@call [WaitForSingleObject]([form.hThread], -1)
	@call [CloseHandle]([form.hThread])
	@call [CloseHandle]([form.threadParams.hCOMEvent])
	@call [CloseHandle]([form.threadParams.hStopEvent])
	@call [CloseHandle]([form.threadParams.hPauseEvent])
	@call [CloseHandle]([form.threadParams.hPausedEvent])
	@call form.comIface->close()
	ret
endp

proc_resprologue


; proc PortForm_itemKey uses pbx psi, lpForm, lpParams, lpEventData
; 	@virtObj form:arg PortForm at pbx from @arg1
; 	@virtObj _params params at pdx from @arg2
; 	mov pax, [_params.lParam]
; 	cmp pax, [form.listBoxOutFormat.hWnd]
; 		jne .return
; 	@call c [printf]("%d\n", word[_params.wParam])
; 	local incrementor:dd 1, lpListBox:POINTER
; 	@call [lpListBox] = [GetWindowPtrA]([_params.wParam], GWL_USERDATA)	
; 	switch word[_params.wParam] 
; 		case VK_RETURN
; 			movzx eax, word[_params.wParam + 2]
; 			mov [form.listBoxOutFormat.lastSelected], eax
; 			jmp end_case
; 		case VK_UP
; 			mov [incrementor], -1
; 		case VK_DOWN
; 			@call LISTBOX::getCount([lpListBox])
; 			mov esi, eax
; 			movzx eax, word[_params.wParam + 2]
; 			add eax, [incrementor]
; 			xor edx, edx
; 			div esi
; 			@call LISTBOX::setSelected(edx)
; 	end_switch
; 	.return: ret
; endp